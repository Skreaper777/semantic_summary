
📁 Папка: [корень проекта]

📁 Папка: test

  📄 Файл: agent.py
    def __init__(self, x, y):
    def get_vision_params(self):
    🔸 Локальные переменные:
      - vision_experience
      - level
      - length_multiplier
      - angle_multiplier
    def update(self, delta_time):
    def update_satisfaction_from_hunger(self):
    def decrease_hunger(self):
    🔸 Локальные переменные:
      - prev
      - delta
    def avoid_walls(self):
    🔸 Локальные переменные:
      - buffer
      - changed
    def look_for_food(self):
    def evaluate_satisfaction(self):
    def get_position(self):
    def get_lifetime(self):
    import pygame
    import math
    import random
    from constants import *
    class Agent:
    def __init__(self, x, y):
    def get_vision_params(self):
    def update(self, delta_time):
    def update_satisfaction_from_hunger(self):
    def decrease_hunger(self):
    def avoid_walls(self):
    def look_for_food(self):
    from world import food_items
    def evaluate_satisfaction(self):
    def get_position(self):
    def get_lifetime(self):

  📄 Файл: constants.py
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)
    FOOD_COLOR = (255, 0, 0)
    AGENT_COLOR_DEFAULT = (0, 255, 0)
    VISION_COLOR = (0, 150, 255, 50)
    MODAL_BG = (50, 50, 50)
    BUTTON_COLOR = (100, 100, 100)
    BUTTON_HOVER_COLOR = (150, 150, 150)
    BUTTON_ACTIVE_COLOR = (0, 150, 0)
    CLOSE_COLOR = (180, 50, 50)
    MAP_WIDTH = 820
    HEIGHT = 600
    MENU_WIDTH = 1000
    WIDTH = MAP_WIDTH + MENU_WIDTH
    AGENT_RADIUS = 10
    FOOD_RADIUS = 4
    BORDER_THICKNESS = 5
    VISION_DISTANCE = AGENT_RADIUS * 4
    VISION_ANGLE = 30
    BASE_DECREASE_INTERVAL = 5000
    SATISFACTION_INTERVAL = 5.0  # секунды между оценками «моего удовольствия»
    AGENT_COST = 100
    FOOD_COST = 5

  📄 Файл: main.py
    import pygame
    import sys
    import random
    from constants import *
    from agent import Agent
    import world
    from ui import (

  📄 Файл: ui.py
    def draw_speed_buttons(screen, font, button_rects, active_label):
    🔸 Локальные переменные:
      - color
      - text
    def draw_add_buttons(screen, font, button_rects, active_mode, score_y):
    🔸 Локальные переменные:
      - color
      - text
    def draw_score(screen, score):
    🔸 Локальные переменные:
      - score_font
      - text
      - pos
    def draw_menu_button(screen, font, mouse_pos, is_active):
    🔸 Локальные переменные:
      - text
    def draw_menu_modal(screen, font, mouse_pos, current_mode, current_add_mode):
    🔸 Локальные переменные:
      - color_buttons
      - add_buttons
      - mouse_pressed
      - clicked_now
      - new_mode
      - new_add_mode
      - rect
      - text
      - new_mode
      - start_y
      - rect
      - text
      - new_add_mode
      - new_add_mode
    def draw_agent_modal(screen, font, agent, modal_rect, close_rect):
    🔸 Локальные переменные:
      - lines
      - log
      - action
      - text
    def draw_agent(screen, agent, color_mode, max_lifetime):
    🔸 Локальные переменные:
      - inner_color
      - inner_color
      - value
      - inner_color
      - value
      - inner_color
      - inner_color
      - border_color
    def draw_vision(screen, agent):
    🔸 Локальные переменные:
      - center
      - direction
      - left_angle
      - right_angle
      - left_vector
      - right_vector
      - points
      - end_pos
    import pygame
    import math
    from constants import *
    from utils import gradient_color
    def draw_speed_buttons(screen, font, button_rects, active_label):
    def draw_add_buttons(screen, font, button_rects, active_mode, score_y):
    def draw_score(screen, score):
    def draw_menu_button(screen, font, mouse_pos, is_active):
    def draw_menu_modal(screen, font, mouse_pos, current_mode, current_add_mode):
    def draw_agent_modal(screen, font, agent, modal_rect, close_rect):
    def draw_agent(screen, agent, color_mode, max_lifetime):
    def draw_vision(screen, agent):

  📄 Файл: utils.py
    def gradient_color(value: float, max_value: float) -> tuple:
    🔸 Локальные переменные:
      - ratio
      - green
      - red
    def gradient_color(value: float, max_value: float) -> tuple:

  📄 Файл: world.py
    def spawn_food(count=10):
    🔸 Локальные переменные:
      - x
      - y
    def update_food(agents, delta_time, game_speed_multiplier, global_score):
    🔸 Локальные переменные:
      - updated_food
      - eaten
      - prev
      - delta
      - eaten
    import pygame
    import random
    from constants import MAP_WIDTH, HEIGHT, FOOD_RADIUS
    from agent import Agent
    def spawn_food(count=10):
    def update_food(agents, delta_time, game_speed_multiplier, global_score):
    from constants import BASE_DECREASE_INTERVAL