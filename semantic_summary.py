import os
import re
import sys
import argparse

try:
    import pyperclip
    CLIPBOARD_AVAILABLE = True
except ImportError:
    CLIPBOARD_AVAILABLE = False

def is_relevant_line(line):
    stripped = line.strip()
    return (
        stripped.startswith("import ")
        or stripped.startswith("from ")
        or re.match(r"^class\s+\w+", stripped)
        or re.match(r"^def\s+\w+", stripped)
        or re.match(r"^[A-Z_]+\s*=", stripped)  # CONSTANTS
        or stripped.startswith("@")
    )

def extract_semantic_structure(root_path, output_file="semantic_summary.txt", copy_to_clipboard=False):
    summary = []

    current_script_path = os.path.abspath(sys.argv[0])

    for dirpath, dirnames, filenames in os.walk(root_path):
        # üßº –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏
        dirnames[:] = [d for d in dirnames if not d.startswith(".")]
        rel_dir = os.path.relpath(dirpath, root_path)
        if rel_dir == ".":
            rel_dir = "[–∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞]"
        summary.append(f"\nüìÅ –ü–∞–ø–∫–∞: {rel_dir}")

        for filename in sorted(filenames):
            if filename.endswith(".py"):
                file_path = os.path.join(dirpath, filename)

                # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º —Å–∫—Ä–∏–ø—Ç
                if os.path.abspath(file_path) == current_script_path:
                    continue

                summary.append(f"\n  üìÑ –§–∞–π–ª: {filename}")
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        lines = f.readlines()

                    inside_function = False
                    function_indent = None
                    function_variables = []

                    semantic_headings = []

                    for i, line in enumerate(lines):
                        stripped = line.strip()

                        # –°–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        if is_relevant_line(line):
                            semantic_headings.append(stripped)

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                        if re.match(r"^def\s+\w+", stripped):
                            if function_variables:
                                summary.append("    üî∏ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
                                summary.extend([f"      - {var}" for var in function_variables])
                                function_variables = []

                            summary.append(f"    {stripped}")
                            inside_function = True
                            function_indent = len(line) - len(line.lstrip())
                            continue

                        if inside_function:
                            current_indent = len(line) - len(line.lstrip())
                            if current_indent <= function_indent:
                                if function_variables:
                                    summary.append("    üî∏ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
                                    summary.extend([f"      - {var}" for var in function_variables])
                                inside_function = False
                                function_variables = []
                            else:
                                if "=" in line and not stripped.startswith("#"):
                                    left = line.split("=")[0].strip()
                                    if re.match(r"^[a-zA-Z_][a-zA-Z0-9_]*$", left):
                                        function_variables.append(left)

                    if function_variables:
                        summary.append("    üî∏ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
                        summary.extend([f"      - {var}" for var in function_variables])

                    if semantic_headings:
                        summary.extend([f"    {line}" for line in semantic_headings])
                    elif not inside_function:
                        summary.append("    ‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (import/class/def/const)")

                except Exception as e:
                    summary.append(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")

    result = "\n".join(summary)

    with open(output_file, "w", encoding="utf-8") as f:
        f.write(result)

    if copy_to_clipboard and CLIPBOARD_AVAILABLE:
        pyperclip.copy(result)
        print("üìã –°–≤–æ–¥–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.")

    print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {output_file}")

# üöÄ CLI-–∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏ Python-–ø—Ä–æ–µ–∫—Ç–∞.")
    parser.add_argument("--path", type=str, default=".", help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--copy", action="store_true", help="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")

    args = parser.parse_args()
    root_path = os.path.abspath(args.path)

    extract_semantic_structure(root_path, copy_to_clipboard=args.copy)
